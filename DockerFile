# Use the official Golang image to create a build artifact.
# This is based on Debian and sets the GOPATH to /go.
FROM golang:1.22 as builder

# Copy local code to the container image.
WORKDIR /server

# Copy go.mod and go.sum files to the working directory
COPY go.mod go.sum ./

# Download all dependencies specified in the go.mod file
RUN go mod download

# Copy the rest of the source code
COPY . .

# Build the binary.
RUN CGO_ENABLED=0 GOOS=linux go build -v -o server

# Use a Docker multi-stage build to create a lean production image.
# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds
FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/

# Copy the binary to the production image from the builder stage.
COPY --from=builder /server/server /root/

EXPOSE 4444
# Run the web service on container startup.
CMD ["./server"]